{ pkgs ? import <nixpkgs> {} }:

let
  python = pkgs.python3;
  pythonPackages = python.pkgs;
  stdenv = pkgs.stdenv;

in pythonPackages.buildPythonPackage rec {
  pname = "gprMax";
  version = "3.1.7";

  src = pkgs.fetchFromGitHub {
    owner = "gprMax";
    repo = "gprMax";
    rev = "v.${version}";
    hash = "sha256-6pcNaf/B9p3pz6iCXzWB24kDnrNDaAL17wMCqodsU5o=";
  };

  nativeBuildInputs = [
    pythonPackages.cython
    pkgs.findutils
    pkgs.gcc
    pkgs.pkg-config
  ];

  buildInputs = with pythonPackages; [
    colorama
    cython
    h5py
    jupyter
    matplotlib
    numpy
    psutil
    scipy
    terminaltables
    tqdm
  ] ++ [
    pkgs.zlib
    pkgs.stdenv.cc.cc.lib
  ];

  # Set up proper compiler environment with OpenMP flags
  preConfigure = ''
    export CC=${pkgs.gcc}/bin/gcc
    export CXX=${pkgs.gcc}/bin/g++
    export NIX_CFLAGS_COMPILE="-fopenmp $NIX_CFLAGS_COMPILE"
    export NIX_LDFLAGS="-fopenmp $NIX_LDFLAGS"
  '';

  # Pre-build phase to run Cython compilation on all .pyx files
  preBuild = ''
    find . -name "*.pyx" -exec cython {} \
      --directive boundscheck=False \
      --directive wraparound=False \
      --directive initializedcheck=False \
      --directive embedsignature=True \
      --directive language_level=3 \
      --verbose \;
  '';

  buildPhase = ''
    python setup.py build
  '';

  # Remove conflicting f2py files during installation
  installPhase = ''
    python setup.py install --prefix=$out
  '';

  # Disable checks if they fail due to OpenMP or other build issues
  doCheck = false;

  # Handle library paths for compiled extensions
  preFixup = ''
    export LD_LIBRARY_PATH="${pkgs.stdenv.cc.cc.lib}/lib:$LD_LIBRARY_PATH"
  '';

  meta = with pkgs.lib; {
    description = "Electromagnetic Modelling Software based on the Finite-Difference Time-Domain (FDTD) method";
    homepage = "http://www.gprmax.com";
    license = licenses.gpl3Plus;
    maintainers = with maintainers; [ your-name-here ];
    platforms = platforms.unix;
  };
}
